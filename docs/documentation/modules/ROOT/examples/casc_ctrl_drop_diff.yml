---
- hosts: all
  connection: local
  gather_facts: false
  vars:
    controller_configuration_projects_async_retries: 120
    controller_configuration_projects_async_delay: 2
    controller_username: "{{ vault_controller_username | default(lookup('env', 'CONTROLLER_USERNAME')) }}"
    controller_password: "{{ vault_controller_password | default(lookup('env', 'CONTROLLER_PASSWORD')) }}"
    controller_hostname: "{{ vault_controller_hostname | default(lookup('env', 'CONTROLLER_HOST')) }}"
    controller_validate_certs: "{{ vault_controller_validate_certs | default(lookup('env', 'CONTROLLER_VERIFY_SSL')) }}"
  pre_tasks:
    - name: "Setup authentication (block)"
      block:
        - name: "Get the Authentication Token for the future requests"
          ansible.builtin.uri:
            url: "https://{{ controller_hostname }}/api/v2/tokens/"
            user: "{{ controller_username }}"
            password: "{{ controller_password }}"
            method: POST
            force_basic_auth: true
            validate_certs: "{{ controller_validate_certs }}"
            status_code: 201
          register: authtoken_res

        - name: "Set the oauth token to be used since now"
          ansible.builtin.set_fact:
            controller_oauthtoken: "{{ authtoken_res.json.token }}"
            controller_oauthtoken_url: "{{ authtoken_res.json.url }}"
      no_log: "{{ controller_configuration_object_diff_secure_logging | default('false') }}"
      when: controller_oauthtoken is not defined
      tags:
        - always

    - name: "Create a symlink to the current directory (contains the current project) when project_to_clone is not provided"
      ansible.builtin.file:
        src: "."
        dest: "./checkout"
        state: link
      when: project_to_clone is not defined
      tags:
        - always

    - name: "Clone the required repo when project_to_clone is provided"
      environment:
        - GIT_SSL_NO_VERIFY: "{{ git_ssl_no_verify | default(true) }}"
      ansible.builtin.git:
        repo: "{{ project_to_clone | ansible.builtin.regex_replace('(https?://)','\\1'+gitlab_api_user+':'+gitlab_api_token+'@') }}"
        dest: "./checkout"
        version: "{{ casc_gitlab_scm_branch }}"
      no_log: "{{ controller_configuration_object_diff_secure_logging | default('false') }}"
      when: project_to_clone is defined
      tags:
        - always

  roles:
    - role: infra.controller_configuration.filetree_read
      vars:
        filetree_controller_settings: "./checkout/{{ dir_orgs_vars }}/{{ orgs }}/env/{{ env }}/controller_settings.d/"
        filetree_controller_organizations: "./checkout/{{ dir_orgs_vars }}/{{ orgs }}/env/common/controller_organizations.d/"
        filetree_controller_labels: "./checkout/{{ dir_orgs_vars }}/{{ orgs }}/env/common/controller_labels.d/"
        filetree_controller_user_accounts: "./checkout/{{ dir_orgs_vars }}/{{ orgs }}/env/{{ env }}/controller_users.d/"
        filetree_controller_teams: "./checkout/{{ dir_orgs_vars }}/{{ orgs }}/env/common/controller_teams.d/"
        filetree_controller_credential_types: "./checkout/{{ dir_orgs_vars }}/{{ orgs }}/env/common/controller_credential_types.d/"
        filetree_controller_credentials: "./checkout/{{ dir_orgs_vars }}/{{ orgs }}/env/{{ env }}/controller_credentials.d/"
        filetree_controller_credential_input_sources: "./checkout/{{ dir_orgs_vars }}/{{ orgs }}/env/common/controller_credential_input_sources.d/"
        filetree_controller_notifications: "./checkout/{{ dir_orgs_vars }}/{{ orgs }}/env/common/controller_notification_templates.d/"
        filetree_controller_projects: "./checkout/{{ dir_orgs_vars }}/{{ orgs }}/env/common/controller_projects.d/"
        filetree_controller_execution_environments: "./checkout/{{ dir_orgs_vars }}/{{ orgs }}/env/{{ env }}/controller_execution_environments.d/"
        filetree_controller_applications: "./checkout/{{ dir_orgs_vars }}/{{ orgs }}/env/common/controller_applications.d/"
        filetree_controller_inventories: "./checkout/{{ dir_orgs_vars }}/{{ orgs }}/env/common/controller_inventories.d/"
        filetree_controller_inventory_sources: "./checkout/{{ dir_orgs_vars }}/{{ orgs }}/env/{{ env }}/controller_inventory_sources.d/"
        filetree_controller_instance_groups: "./checkout/{{ dir_orgs_vars }}/{{ orgs }}/env/{{ env }}/controller_instance_groups.d/"
        filetree_controller_hosts: "./checkout/{{ dir_orgs_vars }}/{{ orgs }}/env/{{ env }}/controller_hosts.d/"
        filetree_controller_groups: "./checkout/{{ dir_orgs_vars }}/{{ orgs }}/env/common/controller_groups.d/"
        filetree_controller_templates: "./checkout/{{ dir_orgs_vars }}/{{ orgs }}/env/common/controller_job_templates.d/"
        filetree_controller_workflow_job_templates: "./checkout/{{ dir_orgs_vars }}/{{ orgs }}/env/common/controller_workflow_job_templates.d/"
        filetree_controller_schedules: "./checkout/{{ dir_orgs_vars }}/{{ orgs }}/env/common/controller_schedules.d/"
        filetree_controller_roles: "./checkout/{{ dir_orgs_vars }}/{{ orgs }}/env/common/controller_roles.d/"

    - role: infra.controller_configuration.object_diff
      vars:
        protect_not_empty_orgs: true
        controller_configuration_object_diff_tasks:
          - {name: workflow_job_templates, var: controller_workflows, tags: workflow_job_templates}
          - {name: job_templates, var: controller_templates, tags: job_templates}
          - {name: teams, var: controller_teams, tags: teams}
          # - {name: roles, var: controller_roles, tags: roles}
          # - {name: user_accounts, var: controller_user_accounts, tags: users}
          - {name: groups, var: controller_groups, tags: groups}
          - {name: hosts, var: controller_hosts, tags: hosts}
          - {name: inventory_sources, var: controller_inventory_sources, tags: inventory_sources}
          - {name: inventories, var: controller_inventories, tags: inventories}
          - {name: projects, var: controller_projects, tags: projects}
          - {name: credentials, var: controller_credentials, tags: credentials}
          # - {name: credential_types, var: controller_credential_types, tags: credential_types}
          - {name: organizations, var: controller_organizations, tags: organizations}
    - role: infra.controller_configuration.dispatch
      vars:
        controller_configuration_dispatcher_roles:
          - {role: workflow_job_templates, var: controller_workflows, tags: workflow_job_templates}
          - {role: job_templates, var: controller_templates, tags: job_templates}
          - {role: teams, var: controller_teams, tags: teams}
          # - {role: roles, var: controller_roles, tags: roles}
          # - {role: user_accounts, var: controller_user_accounts, tags: users}
          - {role: groups, var: controller_groups, tags: groups}
          - {role: hosts, var: controller_hosts, tags: hosts}
          - {role: projects, var: controller_projects, tags: projects}
          - {role: inventory_sources, var: controller_inventory_sources, tags: inventory_sources}
          - {role: inventories, var: controller_inventories, tags: inventories}
          - {role: credentials, var: controller_credentials, tags: credentials}
          # - {role: credential_types, var: controller_credential_types, tags: credential_types}
          - {role: organizations, var: controller_organizations, tags: organizations}
  post_tasks:
    - name: "Cleanup the checkout directory/link"
      ansible.builtin.file:
        dest: "./checkout"
        state: absent

    - name: "Delete the Authentication Token used"
      ansible.builtin.uri:
        url: "https://{{ controller_hostname }}{{ controller_oauthtoken_url }}"
        user: "{{ controller_username }}"
        password: "{{ controller_password }}"
        method: DELETE
        force_basic_auth: true
        validate_certs: "{{ controller_validate_certs }}"
        status_code: 204
      when: controller_oauthtoken_url is defined
...
