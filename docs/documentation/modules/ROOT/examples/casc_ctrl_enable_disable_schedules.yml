---
- hosts: all
  connection: local
  gather_facts: false
  vars:
    controller_username: "{{ vault_controller_username | default(lookup('env', 'CONTROLLER_USERNAME')) }}"
    controller_password: "{{ vault_controller_password | default(lookup('env', 'CONTROLLER_PASSWORD')) }}"
    controller_hostname: "{{ vault_controller_hostname | default(lookup('env', 'CONTROLLER_HOST')) }}"
    controller_validate_certs: "{{ vault_controller_validate_certs | default(lookup('env', 'CONTROLLER_VERIFY_SSL')) }}"
    #  query_controller_api_max_objects: 10000
    #  controller_schedules_exclude_pattern: "^[a-zA-Z ]*(CasC_Objects_(?:Cleanup|Creation))"
    #  controller_schedules_exclude_list:
    #    - "Cleanup Activity Schedule"
    #    - "Cleanup Expired OAuth 2 Tokens"
    #    - "Cleanup Expired Sessions"
    #    - "Cleanup Job Schedule"
  pre_tasks:
    - name: "Check requirements (block)"
      tags:
        - always
      block:
        - name: "Check installed collections (block)"
          block:
            - name: "Check if the collection ansible.controller is installed"
              ansible.builtin.set_fact:
                ansible_controller_collection_installed: "{{ lookup('ansible.builtin.pipe', 'ansible-galaxy collection list | grep -i ansible.controller || echo NOTINSTALLED') }}"
              failed_when: ansible_controller_collection_installed is match('NOTINSTALLED')
          rescue:
            - name: "Check if the collection awx.awx is installed"
              ansible.builtin.set_fact:
                awx_awx_collection_installed: "{{ lookup('ansible.builtin.pipe', 'ansible-galaxy collection list | grep -i awx.awx || echo NOTINSTALLED') }}"
              failed_when: awx_awx_collection_installed is match('NOTINSTALLED')
          always:
            - name: "Set the collection providing the controller_api lookup plugin"
              ansible.builtin.set_fact:
                controller_api_plugin: "{{ ('ansible.controller.controller_api' if ansible_controller_collection_installed is defined) | default('awx.awx.controller_api' if awx_awx_collection_installed is defined) | default('NONE') }}"
            - name: "Fail if no collection is detected"
              ansible.builtin.fail:
                msg: "One of the following collections is required to be installed: 'ansible.controller' or 'awx.awx'."
              when: controller_api_plugin is match('NONE')
            - name: "Show the plugin we are using"
              ansible.builtin.debug:
                msg: "Using the 'controller_api' plugin from: {{ controller_api_plugin }}"

    - name: "Setup authentication (block)"
      when: controller_oauthtoken is not defined
      tags:
        - always
      block:
        - name: "Get the Authentication Token for the future requests"
          ansible.builtin.uri:
            url: "https://{{ controller_hostname }}/api/v2/tokens/"
            user: "{{ controller_username }}"
            password: "{{ controller_password }}"
            method: POST
            force_basic_auth: true
            validate_certs: "{{ controller_validate_certs }}"
            status_code: 201
          register: authtoken_res

        - name: "Set the oauth token to be used since now"
          ansible.builtin.set_fact:
            controller_oauthtoken: "{{ authtoken_res.json.token }}"
            controller_oauthtoken_url: "{{ authtoken_res.json.url }}"
      no_log: "{{ controller_configuration_filetree_read_secure_logging | default('false') }}"

  tasks:

    - name: "Get all Schedules from the API"
      ansible.builtin.set_fact:
        schedules_lookvar: "{{ query(controller_api_plugin, 'api/v2/schedules/',
                                    host=controller_hostname, oauth_token=controller_oauthtoken, verify_ssl=controller_validate_certs,
                                    return_all=true, max_objects=query_controller_api_max_objects) |
                                    rejectattr('name','in', controller_schedules_exclude_list ) |
                                    map(attribute='name')
                           }}"
      when: controller_schedules_exclude_pattern is not defined or controller_schedules_exclude_pattern |length < 1

    - name: "Get all Schedules from the API"
      ansible.builtin.set_fact:
        schedules_lookvar: "{{ query(controller_api_plugin, 'api/v2/schedules/',
                                    host=controller_hostname, oauth_token=controller_oauthtoken, verify_ssl=controller_validate_certs,
                                    return_all=true, max_objects=query_controller_api_max_objects) |
                                    rejectattr('name','in', controller_schedules_exclude_list ) |
                                    rejectattr('name','match', controller_schedules_exclude_pattern)|
                                    map(attribute='name')
                           }}"
      when: controller_schedules_exclude_pattern is defined and controller_schedules_exclude_pattern | length > 0

    - name: "Set __CONTROLLER_CLUSTER_ID variable"
      ansible.builtin.set_fact:
        __CONTROLLER_CLUSTER_ID: "{{ lookup('ansible.builtin.env', 'CONTROLLER_CLUSTER_ID') }}"

    - name: "Set __schedule_is_enabled according where is executing and active site"
      ansible.builtin.set_fact:
        __schedule_is_enabled:  "{{ true if __CONTROLLER_CLUSTER_ID == controller_inventory_site_is_active else false }}"

    - name: "Set controller_schedules list to be applied"
      ansible.builtin.set_fact:
        controller_schedules: "{{ controller_schedules | default([]) + [({'name': schedules_lookvar_item, 'enabled': __schedule_is_enabled })] }}"
      loop: "{{ schedules_lookvar }}"
      loop_control:
        loop_var: schedules_lookvar_item

    - name: "Configure Controller Schedules | site: [{{ __CONTROLLER_CLUSTER_ID | upper }}] - Schedules are {{ '[ENABLED]' if __schedule_is_enabled else '[DISABLED]' }}"
      ansible.builtin.include_role:
        name: infra.controller_configuration.schedules

  post_tasks:
    - name: "Delete the Authentication Token used"
      ansible.builtin.uri:
        url: "https://{{ controller_hostname }}{{ controller_oauthtoken_url }}"
        user: "{{ controller_username }}"
        password: "{{ controller_password }}"
        method: DELETE
        force_basic_auth: true
        validate_certs: "{{ controller_validate_certs }}"
        status_code: 204
      when: controller_oauthtoken_url is defined
...
# ansible-navigator run enable_disable_schedules.yml -i inventory -l dev -m stdout --eei quay.io/automationiberia/aap/ee-casc:latest --pull-arguments=--tls-verify=false --vault-password-file .vault_password
