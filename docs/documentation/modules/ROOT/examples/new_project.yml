---
- hosts: localhost
  connection: local
  gather_facts: false
  vars:
    query_controller_api_max_objects: 1
  pre_tasks:
    - name: "Check requirements (block)"
      tags:
        - always
      block:
        - name: "Check installed collections (block)"
          block:
            - name: "Check if the collection ansible.controller is installed"
              ansible.builtin.set_fact:
                ansible_controller_collection_installed: "{{ lookup('ansible.builtin.pipe', 'ansible-galaxy collection list | grep -i ansible.controller || echo NOTINSTALLED') }}"
              failed_when: ansible_controller_collection_installed is match('NOTINSTALLED')
          rescue:
            - name: "Check if the collection awx.awx is installed"
              ansible.builtin.set_fact:
                awx_awx_collection_installed: "{{ lookup('ansible.builtin.pipe', 'ansible-galaxy collection list | grep -i awx.awx || echo NOTINSTALLED') }}"
              failed_when: awx_awx_collection_installed is match('NOTINSTALLED')
          always:
            - name: "Set the collection providing the controller_api lookup plugin"
              ansible.builtin.set_fact:
                controller_api_plugin: "{{ ('ansible.controller.controller_api' if ansible_controller_collection_installed is defined) | default('awx.awx.controller_api' if awx_awx_collection_installed is defined) | default('NONE') }}"

            - name: "Fail if no collection is detected"
              ansible.builtin.fail:
                msg: "One of the following collections is required to be installed: 'ansible.controller' or 'awx.awx'."
              when: controller_api_plugin is match('NONE')
            - name: "Show the plugin we are using"
              ansible.builtin.debug:
                msg: "Using the 'controller_api' plugin from: {{ controller_api_plugin }}"

  tasks:
    - name: "Assert that the required input variables are defined"
      ansible.builtin.assert:
        that: "{{ current_check.conditions }}"
        fail_msg: "{{ current_check.fail_msg }}"
        quiet: true
      loop_control:
        loop_var: current_check
        label: "Check the required variable {{ current_check.conditions[0] }}"
      loop:
        - conditions:
            - organization_name is defined
            - organization_name | length > 0
          fail_msg: "the 'organization_name' variable must be defined {{ ('. Current value is: ' + organization_name) if organization_name is defined }}"
        - conditions:
            - organization_desc is defined
            - organization_desc | length > 0
          fail_msg: "the 'organization_desc' variable must be defined to give a description to the organization {{ ('. Current value is: ' + organization_desc) if organization_desc is defined }}"
        - conditions:
            - admin_user is defined
            - admin_user | length > 0
          fail_msg: "the 'admin_user' variable must be defined {{ ('. Current value is: ' + admin_user) if admin_user is defined }}"

    - name: "Set the GitLab URL for the CasC project"
      set_fact:
        gitlab_casc_repo: "{{ gitlab_api_url }}/{{ (gitlab_group + '/') if (gitlab_group is defined and gitlab_group is not regex('^\\s*$')) }}{{ (gitlab_subgroup + '/') if (gitlab_subgroup is defined and gitlab_subgroup is not regex('^\\s*$')) }}{{ orgs }}.git"

    - name: "Clone the required repo"
      environment:
        - GIT_SSL_NO_VERIFY: "{{ git_ssl_no_verify | default(true) }}"
      ansible.builtin.git:
        repo: "{{ gitlab_casc_repo | ansible.builtin.regex_replace('(https?://)','\\1'+gitlab_api_user+':'+gitlab_api_token+'@') }}"
        dest: "./checkout"
        version: "{{ awx_project_scm_branch }}"
      no_log: false

    - name: "Create all the required objects"
      vars:
        gitlab_host: "{{ (lookup('env', 'PROJECT_URL_CASC') | default(GITLAB_HOST, true)) | regex_search('([^@]*)@([^:]*):.*', '\\2') | first }}"
      ansible.builtin.template:
        src: "{{ current_file.src }}"
        dest: "./checkout/{{ current_file.dest }}"
        mode: '0644'
      loop_control:
        loop_var: current_file
        label: "Creating the file {{ current_file.dest }}"
      loop:
        - src: "templates/new_project_controller_organizations.j2"
          dest: "{{ orgs_vars }}/{{ orgs }}/env/common/controller_organizations.d/{{ organization_name }}.yml"
        - src: "templates/new_project_controller_job_templates.j2"
          dest: "{{ orgs_vars }}/{{ orgs }}/env/common/controller_job_templates.d/{{ organization_name }}_casc.yml"
        - src: "templates/new_project_controller_credentials.j2"
          dest: "{{ orgs_vars }}/{{ orgs }}/env/{{ env }}/controller_credentials.d/{{ organization_name }}_casc.yml"
        - src: "templates/new_project_controller_user_accounts_admin.j2"
          dest: "{{ orgs_vars }}/{{ orgs }}/env/{{ env }}/controller_users.d/{{ organization_name }}_admin.yml"
        - src: "templates/new_project_controller_user_accounts_casc.j2"
          dest: "{{ orgs_vars }}/{{ orgs }}/env/{{ env }}/controller_users.d/{{ organization_name }}_casc.yml"
        - src: "templates/new_project_controller_roles.j2"
          dest: "{{ orgs_vars }}/{{ orgs }}/env/common/controller_roles.d/{{ organization_name }}.yml"

    - name: "Push the new objects to the {{ orgs }} organization"
      environment:
        - GIT_SSL_NO_VERIFY: "{{ git_ssl_no_verify | default(true) }}"
      ansible.builtin.shell: |
        git config --global user.name "CasC_New_Org"
        git config --global user.email "cascneworg@example.com"
        git add -A && git commit -m "CasC New Organization Job ID {{ tower_job_id | default('MANUAL') }}: {{ organization_name }} Automated Commit by Ansible  "
        git push -o merge_request.create -o merge_request.target="{{ env }}" -o merge_request.title="New Org {{ organization_name }}" -o merge_request.merge_when_pipeline_succeeds
      args:
        chdir: "./checkout"
      ignore_errors: true
      register: output
      failed_when:
        - output.msg != ""
        - (
            "error" in output.msg or
            "conflict" in output.msg or
            "Errno" in output.msg or
            "fatal" in output.msg or (
              output.stdout != "" and "nothing to commit, working tree clean" not in output.stdout
            ) or
            (output.stderr != "")
          )

    - name: "Wait for the CasC Job Template to be created"
      vars:
        controller_hostname: "{{ lookup('env', 'CONTROLLER_HOST') }}"
        controller_oauthtoken: "{{ lookup('env', 'CONTROLLER_OAUTH_TOKEN') }}"
        controller_validate_certs: "{{ lookup('env', 'CONTROLLER_VERIFY_SSL') }}"
        jt_name: "{{ organization_name }} {{ env }} CasC Ctrl CD Webhook Trigger"
        query_res: "{{ query(controller_api_plugin, 'api/v2/job_templates/',
                             host=controller_hostname, oauth_token=controller_oauthtoken, verify_ssl=controller_validate_certs,
                             return_all=true, max_objects=query_controller_api_max_objects,
                             query_params={'name': jt_name}
                            )
                    }}"
      retries: 60
      delay: 10
      until: query_res | length > 0

    - name: "Create output artifacts"
      set_stats:
        data:
          job_template_name: "{{ organization_name }} {{ env }} CasC Ctrl CD Webhook Trigger"

...
####
# Running examples:
#### Using ansible-playbook
# ansible-playbook new_project.yml -e '{organization_name: TESTORG, organization_desc: "TESTORG Organization", admin_user: "testorgadminuser", orgs_vars: "orgs_vars", orgs: SUPERADMIN, env: dev, awx_project_scm_branch: centralize_casc}'
#### Using ansible-navigator
# ansible-navigator run new_project.yml -i localhost, -m stdout --eei quay.io/automationiberia/aap/ee-casc:latest -e '{organization_name: TESTORG, organization_desc: "TESTORG Organization", admin_user: "testorgadminuser", orgs_vars: "orgs_vars", orgs: SUPERADMIN, env: dev, awx_project_scm_branch: centralize_casc}' --vault-password-file .vault_password --pa='--tls-verify=false'
####
